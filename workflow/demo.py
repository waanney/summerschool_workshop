import os
import chainlit as cl
from pydantic_ai.models.gemini import GeminiModel
from pydantic_ai.providers.google_gla import GoogleGLAProvider
from utils.basetools.search_web_tool import search_web
from utils.basetools.calculator_tool import calculate_expression, basic_math, trigonometry, logarithm, calculator_memory
from data.prompts.admission_prompt import ADMISSION_PROMPT
from data.cache.redis_cache import ShortTermMemory
from llm.base import AgentClient



# Initialize the Gemini model and agent
provider = GoogleGLAProvider(api_key=os.getenv("GEMINI_API_KEY"))
model = GeminiModel('gemini-2.0-flash', provider=provider)

# Initialize memory for conversation history
memory = ShortTermMemory(max_messages=10)  # L∆∞u t·ªëi ƒëa 10 tin nh·∫Øn

# Single Admission FAQ Agent with Calculator
agent_client = AgentClient(
    model=model,
    system_prompt=ADMISSION_PROMPT,
    tools=[search_web, calculate_expression, basic_math, trigonometry, logarithm, calculator_memory]
)

agent = agent_client.create_agent()

@cl.on_chat_start
async def start():
    """Initialize chat session"""
    # T·∫°o session key duy nh·∫•t cho m·ªói user
    session_key = f"user_{cl.user_session.get('id', 'default')}_session"
    cl.user_session.set("session_key", session_key)
    
    await cl.Message(
        content="üéì **Ch√†o m·ª´ng ƒë·∫øn v·ªõi H·ªá th·ªëng FAQ Tuy·ªÉn sinh v·ªõi Calculator!**\n\n"
                "T√¥i c√≥ th·ªÉ gi√∫p b·∫°n:\n"
                "- Tr·∫£ l·ªùi c√°c c√¢u h·ªèi v·ªÅ tuy·ªÉn sinh\n"
                "- Th·ª±c hi·ªán c√°c ph√©p t√≠nh to√°n h·ªçc\n"
                "- T√¨m ki·∫øm th√¥ng tin tr√™n web\n"
                "- Nh·ªõ l·ªãch s·ª≠ cu·ªôc tr√≤ chuy·ªán c·ªßa ch√∫ng ta\n\n"
                "H√£y ƒë·∫∑t c√¢u h·ªèi c·ªßa b·∫°n!"
    ).send()

@cl.on_message
async def main(message: cl.Message):
    """Handle incoming messages and generate responses with memory."""
    session_key = cl.user_session.get("session_key")
    if not session_key:
        # Fallback n·∫øu kh√¥ng c√≥ session_key
        session_key = "default_session"
        cl.user_session.set("session_key", session_key)
    
    # Ki·ªÉm tra l·ªánh ƒë·∫∑c bi·ªát ƒë·ªÉ x√≥a memory
    if message.content.lower().strip() in ['/clear', '/reset', 'x√≥a l·ªãch s·ª≠', 'clear memory']:
        memory.delete(session_key)
        await cl.Message(
            content="üóëÔ∏è **ƒê√£ x√≥a l·ªãch s·ª≠ cu·ªôc tr√≤ chuy·ªán!**\n\nCh√∫ng ta c√≥ th·ªÉ b·∫Øt ƒë·∫ßu cu·ªôc tr√≤ chuy·ªán m·ªõi."
        ).send()
        return
    
    # L∆∞u tin nh·∫Øn c·ªßa user v√†o memory
    user_message = f"User: {message.content}"
    memory.store(session_key, user_message)
    
    # L·∫•y l·ªãch s·ª≠ conversation
    conversation_history = memory.retrieve(session_key)
    
    # T·∫°o context v·ªõi l·ªãch s·ª≠ cu·ªôc tr√≤ chuy·ªán
    context_with_history = ""
    if len(conversation_history) > 1:  # N·∫øu c√≥ l·ªãch s·ª≠
        context_with_history = "\n--- L·ªãch s·ª≠ cu·ªôc tr√≤ chuy·ªán ---\n"
        # Reverse ƒë·ªÉ hi·ªÉn th·ªã theo th·ª© t·ª± th·ªùi gian (c≈© -> m·ªõi)
        for msg in reversed(conversation_history[1:]):  # B·ªè qua tin nh·∫Øn hi·ªán t·∫°i
            context_with_history += f"{msg}\n"
        context_with_history += "--- H·∫øt l·ªãch s·ª≠ ---\n\n"
    
    # T·∫°o prompt v·ªõi context
    full_message = f"{context_with_history}Current question: {message.content}"
    
    # G·ªçi agent v·ªõi context ƒë·∫ßy ƒë·ªß
    response = await agent.run(full_message)
    
    # L∆∞u response c·ªßa bot v√†o memory
    bot_message = f"Bot: {response.output}"
    memory.store(session_key, bot_message)
    
    await cl.Message(content=str(response.output)).send()